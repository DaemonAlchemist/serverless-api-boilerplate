import { config } from 'dotenv';
import { readFileSync, writeFileSync } from 'fs';
import { flatten } from 'ts-functional';
import { Mapping, UrlMapper } from './api.d';
import { format } from './simple-json-formatter';
import { makeHandler } from "./util";

config();

const expName = (handler:string) => handler.replace(/[\.\/]/g, "");

export type ModuleMapDef = [UrlMapper, string, string];
export const getMappings = (moduleMaps:ModuleMapDef[]):UrlMapper => (baseUrl:string, srcBase:string):Mapping[] =>
    flatten(moduleMaps.map((mapping:ModuleMapDef) => 
        mapping[0](`${baseUrl}/${mapping[1]}`, `${srcBase}/src/${mapping[2]}`)
    ));

export const updateMappings = (mappingDefs:ModuleMapDef[]) => {
    const mappings = getMappings(mappingDefs);
    const newConfig = format(JSON.stringify({
        ...JSON.parse(readFileSync("serverless.json").toString()),
        functions: mappings("", ".")
            .map(([action, url, handler, iamRoleStatements]) => ({
                [`${action}${expName(handler).replace("handler", "").substr(3)}`]: {
                    handler: `index.${expName(handler)}`,
                    events: [
                        {http: {
                            path: url,
                            method: action,
                            cors: true,
                        }}
                    ],
                    iamRoleStatements,
                }
            }))
    }), "  ");
    if(newConfig) {
        writeFileSync("serverless.json", newConfig);
    } else {
        console.error("There was an error creating the new serverless config file");
    }

    writeFileSync("index.ts", "// FILE AUTO-GENERATED BY 'npm run url':  DO NOT EDIT!\n\n" + mappings("", ".").map(([action, url, handler]) => {
        const imp = handler.split(".").pop();
        const impFile = handler.split(".").slice(0, -1).join(".");
        const exp = expName(handler);
        return `export {${imp} as ${exp}} from "${impFile}";`;
    }).join("\n"));
}

export const createMappings = (mappings:[string, string, string][]):UrlMapper =>
    (baseUrl:string, srcBase:string):Mapping[] => {
        const u = makeHandler(baseUrl, srcBase);
        return mappings.map(mapping => u(...mapping));
    }
